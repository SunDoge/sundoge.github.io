<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用 Hexo 搭建个人博客</title>
    <url>/2019/09/14/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="安装Node-js和Hexo"><a href="#安装Node-js和Hexo" class="headerlink" title="安装Node.js和Hexo"></a>安装 Node.js 和 Hexo</h2><p>参照 Hexo 官网教程 <a href="https://hexo.io/docs/#Install-Node-js">https://hexo.io/docs/#Install-Node-js</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br><span class="line">nvm install stable</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure>
<h2 id="创建你的博客"><a href="#创建你的博客" class="headerlink" title="创建你的博客"></a>创建你的博客</h2><p>参照 <a href="https://hexo.io/docs/setup">https://hexo.io/docs/setup</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo init sundoge.github.io</span><br></pre></td></tr></tbody></table></figure>
<p>我使用的 <code>hexo-cli</code> 版本为 <code>2.0.0</code> ，会自动拉取默认主题 <code>landscape</code> 。后面将引入 <a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a> 。</p>
<h2 id="使用Git管理你的博客"><a href="#使用Git管理你的博客" class="headerlink" title="使用Git管理你的博客"></a>使用 Git 管理你的博客</h2><p>Hexo 的设计有个矛盾的地方，theme 有自己的 config 文件，而且不会 merge 到顶层的 config，导致你很难用 git 管理你的 theme。如果你按照 theme-next 的官方文档 install，就相当于在 git 仓库里面创建另 git 仓库，git 是没法管理到仓库里面的仓库的。但是如果单纯使用 git submodule，修改 theme 里面的_config.yml 也是没法用 git 管理的。所以一个折中的方案是，先 fork 一份你要的主题，比如 <a href="https://github.com/SunDoge/hexo-theme-next">SunDoge/hexo-theme-next</a> ，然后 add submodule</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git submodule add git@github.com:SunDoge/hexo-theme-next.git themes/next</span><br></pre></td></tr></tbody></table></figure>
<p>这样 theme 和博客都能被管理到。如果需要更新 theme，只需要运行</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/5828324/update-git-submodule-to-latest-commit-on-origin">https://stackoverflow.com/questions/5828324/update-git-submodule-to-latest-commit-on-origin</a></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git submodule foreach git pull origin master</span><br></pre></td></tr></tbody></table></figure>
<p>这个命令会更新所有的 submodule。</p>
<h2 id="使用theme-next"><a href="#使用theme-next" class="headerlink" title="使用theme-next"></a>使用 theme-next</h2><p>修改顶层<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></tbody></table></figure>
<p>修改 theme 里面的_config.yml</p>
<blockquote>
<p> themes/next/_config.yml</p>
</blockquote>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="开启math支持"><a href="#开启math支持" class="headerlink" title="开启math支持"></a>开启 math 支持</h3><blockquote>
<p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/MATH.md">https://github.com/theme-next/hexo-theme-next/blob/master/docs/MATH.md</a></p>
</blockquote>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>
<p>我暂时使用 mathjax，如果实在太慢，后面再换成 katex。这里还需要替换默认的 render。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-pandoc --save # or hexo-renderer-kramed</span><br></pre></td></tr></tbody></table></figure>
<p>这里不用 kramed 的原因是它最后一次更新在 2017 年。还需要安装 pandoc</p>
<blockquote>
<p><a href="https://github.com/jgm/pandoc/blob/master/INSTALL.md">https://github.com/jgm/pandoc/blob/master/INSTALL.md</a></p>
</blockquote>
<p>安装 pandoc 这点让我很不满意，使用 Hexo 已经要安装很多东西了（node_modules），为了 mathjax 还要整个 pandoc。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote>
<p><a href="https://hexo.io/docs/deployment.html#Git">https://hexo.io/docs/deployment.html#Git</a></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:SunDoge/sundoge.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">published</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后在 github 上新建一个 branch 名为 published</p>
<blockquote>
<p><a href="https://help.github.com/en/articles/creating-and-deleting-branches-within-your-repository">https://help.github.com/en/articles/creating-and-deleting-branches-within-your-repository</a></p>
</blockquote>
<p>并把它设为 default branch。然后执行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></tbody></table></figure>
<p>编译好的文件会推送的 published 分支。</p>
<h2 id="为什么使用Hexo"><a href="#为什么使用Hexo" class="headerlink" title="为什么使用Hexo"></a>为什么使用 Hexo</h2><p>Hugo 虽然性能好，但是大部分主题年久失修，而且质量都不高，从 jekyll 和 hexo 移植的主题也大多有问题，缺少原有的部分功能。最后没办法，还是要用前端写的工具。</p>
<p>为了方便以后的写作，我计划使用 Rust 开发一个 hexo-cli 的子集，只支持 theme-next 的正确编译🕊🕊🕊​。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Hyper-V 上安装 manjaro</title>
    <url>/2019/09/15/%E5%9C%A8Hyper-V%E4%B8%8A%E5%AE%89%E8%A3%85manjaro/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://forum.manjaro.org/t/how-to-run-manjaro-on-windows-10-hyper-v-gen2/54092/20">https://forum.manjaro.org/t/how-to-run-manjaro-on-windows-10-hyper-v-gen2/54092/20</a></p>
</blockquote>
<p><img src="https://i.loli.net/2019/09/15/PFraGJk26T1WjVC.png" alt="xrdp"></p>
<p><a href="https://forum.manjaro.org/t/installing-manjaro-in-hyper-v-with-enhanced-session-support/79394">https://forum.manjaro.org/t/installing-manjaro-in-hyper-v-with-enhanced-session-support/79394</a></p>
]]></content>
      <tags>
        <tag>Manjaro</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>写作方向调整</title>
    <url>/2020/07/29/%E5%86%99%E4%BD%9C%E6%96%B9%E5%90%91%E8%B0%83%E6%95%B4/</url>
    <content><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>此次更新了 post 的命名格式。</p>
<h2 id="方向调整"><a href="#方向调整" class="headerlink" title="方向调整"></a>方向调整</h2><p>赵神钦定，这个博客以后只写赵神不会的东西。</p>
]]></content>
      <tags>
        <tag>Announcement</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 theme_config 管理你的 Hexo theme</title>
    <url>/2020/07/31/%E4%BD%BF%E7%94%A8theme-config%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84Hexo-theme/</url>
    <content><![CDATA[<p>自 Hexo 2.8.2 之后 <a href="https://hexo.io/docs/configuration">[1]</a>，Hexo 支持使用 <code>theme_config</code> 来配置 theme。在这之前，如果我们想要使用 git 来更新我们 theme，同时又想用 git 管理 theme 的 config，我所知道的唯一一个办法，就是 fork 一份 theme，修改其中的<code>_config.yml</code>，再用 <code>git submodule</code> 将 fork 的 theme 引入博客仓库中。这个过程比较繁琐。</p>
<p>现在，我们可以利用博客仓库下的<code>_config.yml</code> 来覆盖 theme 仓库下的 config。以我使用的 NexT 为例，默认的 Muse scheme 并不和我意，我希望将其修改成 Mist scheme，只需要添加几行配置：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">theme_config:</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">Mist</span></span><br></pre></td></tr></tbody></table></figure>
<p>Hexo 5.0.0 之后 <a href="https://hexo.io/docs/configuration">[1]</a>，我们还可以为每个 theme 创建一个单独的 config 文件来进行管理，文件命名规则为<code>_config.[theme].yml</code>。还是以 NexT 为例，创建<code>_config.next.yml</code>，修改内容为：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br></pre></td></tr></tbody></table></figure>
<p>theme 就配置好了。</p>
<p>很奇怪的一点是，目前很多关于 theme 的资料都没有提到 Hexo 已经支持覆盖 theme config，导致我使用了很长一段时间的 Hexo 3.9，却还是在用 fork+submodule 的方法来管理 theme。</p>
<p>下次我将尝试使用 github action 来自动 deploy 我的博客。</p>
<hr>
<p>2020-07-31 Update</p>
<p>Hexo 5.0.0 支持使用 npm 配置 theme 了。以后不需要手动管理版本，只需要</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-theme-next --save</span><br></pre></td></tr></tbody></table></figure>
<p>目前通过 npm 安装的主题在执行 hexo clean 时会报错，是 Hexo 的已知问题，将在下个版本修复。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 GitHub Action 自动部署 Hexo 博客</title>
    <url>/2020/08/02/%E4%BD%BF%E7%94%A8GitHub-Action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>基本流程参照 <a href="https://github.com/marketplace/actions/hexo-action">https://github.com/marketplace/actions/hexo-action</a></p>
<h2 id="Step-1-生成ssh-key-pair"><a href="#Step-1-生成ssh-key-pair" class="headerlink" title="Step 1. 生成ssh key pair"></a>Step 1. 生成 ssh key pair</h2><p>首先，我们需要生成 ssh key pair。最好是专门为这个仓库生成一个 pair，因为后面需要上传私钥，如果是本机常用的 ssh key pair，会存在一定风险。</p>
<p>将公钥填入 <code>Settings &gt; Deploy Keys</code>。将私钥填入 <code>Settings &gt; Secrets</code>，键名设为 <code>DEPLOY_KEY</code>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"username@example.com"</span></span><br></pre></td></tr></tbody></table></figure>
<p>邮箱可以修改为自己的邮箱，询问保存 key 的文件路径时，随便写一个，避免覆盖原有的 key。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"> ± ssh-keygen -t rsa -C <span class="string">"username@example.com"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/sundoge/.ssh/id_rsa): hexo</span><br></pre></td></tr></tbody></table></figure>
<p>以输入 <code>hexo</code> 为例，在当前目录下得到 <code>hexo</code>，<code>hexo.pub</code> 两个文件，前者是私钥，后者是公钥。</p>
<h2 id="Step2-配置GitHub-Action"><a href="#Step2-配置GitHub-Action" class="headerlink" title="Step2: 配置GitHub Action"></a>Step2: 配置 GitHub Action</h2><p>创建<code>.github/workflows/xxx.yml</code>，用你认为的 workflow 名字命名。<a href="https://github.com/marketplace/actions/hexo-action">Hexo Action</a> 里面给出了详细的设置，我这里只放我自己的</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">'dev'</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">A</span> <span class="string">job</span> <span class="string">to</span> <span class="string">deploy</span> <span class="string">blog.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">${{</span> <span class="string">runner.os</span> <span class="string">}}-node-${{</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">${{</span> <span class="string">runner.os</span> <span class="string">}}-node-</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">'true'</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Deploy hexo blog website.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">sma11black/hexo-action@v1.0.2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">${{</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">}}</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">output</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">"$<span class="template-variable">{{ steps.deploy.outputs.notify }}</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<p>首先我把写作分支设在了 dev，所以触发条件是 dev branch 存在 push 操作。然后我们会检查 <code>node_modules</code> 的缓存，如果没有缓存就 <code>npm install</code> 并缓存。最后我们调用 <code>sma11black/hexo-action</code>，里面本质上就是帮你执行了 <code>hexo deploy</code> 的操作，这样编译好的静态页面就推到 master branch 了。</p>
<p>尝试过几次，删掉多余的 dependency 之后，GitHub Action 正常运作。</p>
<p><img src="https://i.loli.net/2020/07/31/C9HbrLjyUO1X3EQ.png" alt="image.png"></p>
<p>不足的地方在于调用别人的 action，可能有一些需要手动安装的依赖缺失。后续考虑研究一下 GitHub Action。</p>
]]></content>
      <tags>
        <tag>GitHub Action</tag>
      </tags>
  </entry>
</search>
